import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:shop/provider/product.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Products with ChangeNotifier {
  List<Product> _items = [];

  /* Product(
      id: 'p1',
      title: 'Red Shirt',
      description: 'A red shirt - it is pretty red!',
      price: 2999,
      imageUrl:
          'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    ),
    Product(
      id: 'p2',
      title: 'Trousers',
      description: 'A nice pair of trousers.',
      price: 599,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    ),
    Product(
      id: 'p3',
      title: 'Yellow Scarf',
      description: 'Warm and cozy - exactly what you need for the winter.',
      price: 1999,
      imageUrl:
          'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    ),
    Product(
      id: 'p4',
      title: 'A Pan',
      description: 'Prepare any meal you want.',
      price: 499,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    ),
  ];*/

  Product findById(String id) {
    return items.firstWhere((product) => product.id == id);
  }

  List<Product> get favoritesProducts {
    return _items.where((product) => product.isFavorite).toList();
  }


  List<Product> get items {
    return [..._items];
  }

  /* void showFavoritesOnly() {
    _showFavoritesOnly = false;
  }

  void showAll() {
    _showFavoritesOnly = true;
  } */

  final String token;
  final String userId;

  Products(this.token, this.userId, this._items);

  Future<void> addProducts(Product product) {
    final url = "https://shop-49945.firebaseio.com/products.json?auth=$token";
    return http
        .post(
      url,
      body: json.encode({
        "title": product.title,
        "description": product.description,
        "imageUrl": product.imageUrl,
        "price": product.price,
        "creatorId": userId
      }),
    )
        .then((response) {
      final newProduct = Product(
        id: json.decode(response.body)["name"],
        // the id  which is generated by firebase
        title: product.title,
        description: product.description,
        price: product.price,
        imageUrl: product.imageUrl,
      );
      _items.add(newProduct);
      notifyListeners();
    });
  }

  Future<void> fetchAndSetProducts(bool filter) {
    if (filter)
       _items = [];
    final filterScreen = filter ? 'orderBy="creatorId"&equalTo="$userId"' : '';
    final url =
        'https://shop-49945.firebaseio.com/products.json?auth=$token&$filterScreen';
    return http.get(url).then((response) async {
      var extractData = json.decode(response.body) as Map<String, dynamic>;
      if (extractData == null) {
        return;
      }

      final uRL =
          "https://shop-49945.firebaseio.com/userFavorite/$userId.json?auth=$token";
      var favoriteResponse = await http.get(uRL);

      final favoriteData = json.decode(favoriteResponse.body);
      List<Product> loadedProducts = [];

      extractData.forEach((key, value) {
        loadedProducts.add(Product(
          id: key,
          title: value["title"],
          price: value["price"],
          description: value["description"],
          isFavorite: favoriteData == null ? false : favoriteData[key] ?? false,
          imageUrl: value["imageUrl"],
        ));
      });
      _items = loadedProducts;
      notifyListeners();
    });

    //   var response= await http.get(url);
    //  var extractData=json.decode(response.body) as Map <String,dynamic>;
  }

  Future<void> updateProduct(String id, Product newProduct) {
    final prodIndex = _items.indexWhere((prod) => prod.id == id);
    final url = "https://shop-49945.firebaseio.com/products/" +
        id +
        ".json?auth=$token";

    return http
        .patch(url,
            body: json.encode({
              "title": newProduct.title,
              "description": newProduct.description,
              "imageUrl": newProduct.imageUrl,
              "price": newProduct.price,
            }))
        .then((value) {
      _items[prodIndex] = newProduct;
      notifyListeners();
    });
  }

  Future<void> deleteProduct(String id) {
    final url = "https://shop-49945.firebaseio.com/products/" +
        id +
        ".json?auth=$token";
    var existingProductIndex = _items.indexWhere((prod) => prod.id == id);
    var existingProduct = _items[existingProductIndex];
    return http.delete(url).then((value) {
      _items.removeWhere((prod) => prod.id == id);
      existingProduct = null;
      notifyListeners();
    }).catchError((error) {
      _items.insert(existingProductIndex, existingProduct);
      notifyListeners();
    });
  }
}
